<?php
/**
 * @file
 * Code for the PW Vote feature.
 */
include_once 'pw_vote.features.inc';


/**
 * Implements hook_menu().
 */

function pw_vote_menu() {
  $items = array();
  $items['admin/config/pw/vote'] = array(
    'title' => 'PW Vote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_vote_generate_votes_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pw_vote.admin.inc',
  );
  return $items;
}

/**
 * pw_vote_user_allowed().
 * checks if user is allowed to enter form
 *
 * @return int
 *   returns uid or false otherwise
 */

function pw_vote_check_user_allowed() {

  // parameter u indicates the voting deputy
  $getparams = drupal_get_query_parameters();
  if (!isset($getparams['u'])) {
    return FALSE;
  }

  // var salt
  $salt = variable_get('pw_salt');
  if (empty($salt)) {
    return FALSE;
  }

  // load politician by salted get parameter
  $uid = db_query("SELECT uid FROM {users} WHERE MD5(CONCAT(:salt, uuid))=:key", array(':salt' => $salt, ':key' => $getparams['u']))->fetchField();

  return $uid;
}


/**
 * Implements hook_form_alter().
 */

function pw_vote_form_alter(&$form, &$form_state, $form_id) {
  // modify vote search filters
  if ($form_id == 'views_exposed_form' && $form['#id'] == "views-exposed-form-vote-search-block") {
    $parliament_name = _pw_get_current_parliament_term()->name;
    if ($parliament_name == "EU") {
      $form['#info']['filter-search_api_views_fulltext']['label'] = "Suche nach Name";
    }
    $fractions = db_query("SELECT DISTINCT fraction_name FROM user_archive_cache WHERE parliament_name = :parliament AND user_role = :role", array(':parliament' => $parliament_name, ':role' => 'deputy'));
    $form['field_vote_user_field_user_fraction']['#options'] = array('All' => t("All"));
    foreach ($fractions as $fraction) {
      if ($fraction->fraction_name){
        $fraction_term = taxonomy_get_term_by_name($fraction->fraction_name,"fraction");
        reset($fraction_term);
        $tid = key($fraction_term);
        $form['field_vote_user_field_user_fraction']['#options'][$tid] = $fraction->fraction_name;
      }
    }
  }
  // modify vote form
  if ($form_id == 'webform_client_form_57286') {

    // retrieve uid from url parameter u
    $uid = pw_vote_check_user_allowed();
    if(!$uid){
      return FALSE;
    }

    // load main node (e.g. petition)
    $node = menu_get_object();

    // retrieve parliament term id
    $parliament_tid = $node->field_parliament[LANGUAGE_NONE][0]['tid'];

    if (empty($uid) || empty($parliament_tid)) {
      return FALSE;
    }

    // load entity vote
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'vote')
      ->fieldCondition('field_vote_node', 'target_id', $node->nid)
      ->fieldCondition('field_vote_user', 'target_id', $uid)
      ->fieldCondition('field_parliament', 'tid', $node->field_parliament[LANGUAGE_NONE][0]['tid'])
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldOrderBy('field_vote', 'tid');
    $result = $query->execute();

    // vote exists
    if (isset($result['node'])) {

      // load vote and wrap it
      $nid = key($result['node']);
      $vote = node_load($nid);

      $w_vote = entity_metadata_wrapper('node', $vote);

      // changing vote is only allowed till end date or within 24 hours of last change; creating a new one is always allowed.
      if(time() > $w_vote->field_vote_node->field_petition_end_date->value() && $w_vote->field_voted->value() === TRUE && time() - $vote->changed > 86400) {
        $petition_end_date = date('d.m.Y H:i', $w_vote->field_vote_node->field_petition_end_date->value());
        $link_email = l('E-Mail', 'mailto:service@abgeordnetenwatch.de?subject=Mein Stimmverhalten bei '.$node->title, array('absolute' => TRUE));
        drupal_set_message('Die Frist zur Eintragung Ihres Stimmverhaltens ist bereits am ' . $petition_end_date . ' abgelaufen. Bitte setzen Sie sich bei Änderungswünschen mit der Redaktion von '.variable_get('site_name').' unter 040 / 317 69 10 26 oder per '.$link_email.' in Verbindung.', 'warning');
      }

      // check if already voted
      if($w_vote->field_voted->value() === TRUE){

        // set value for voting behavior
        $form['submitted']['vote']['#default_value'] = $w_vote->field_vote->name->value();
      }

      // theme and set portrait
      if ($w_vote->field_vote_user->field_user_picture->value()) {
        $portrait_uri = $w_vote->field_vote_user->field_user_picture->file->value()->uri;
      }
      else {
        $portrait_info = field_info_field('field_user_picture');
        $file = file_load($portrait_info['settings']['default_image']);
        $portrait_uri = $file->uri;
      }
      $portrait = theme('image_style', array(
          'path' => $portrait_uri,
          'style_name' => 'pw_portrait_l__normal',
        )
      );
      $form['submitted']['portrait']['#markup'] = $portrait;

      // replace parameters in welcome text
      switch ($w_vote->field_vote_user->field_user_gender->value()) {
        case 'female':
          $salutation = 'Sehr geehrte Frau ' . $w_vote->field_vote_user->field_user_lname->value();
          break;
        case 'male':
          $salutation = 'Sehr geehrter Herr ' . $w_vote->field_vote_user->field_user_lname->value();
          break;
        default:
          $salutation = 'Guten Tag ' . $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();
          break;
      }
      $welcome_text = $form['submitted']['welcome']['#markup'];
      $welcome_text = format_string($welcome_text, array(
        '@salutation' => $salutation,
        '@welcome_message' => $w_vote->field_vote_node->field_petition_welcome_message->value(),
      ));
      $welcome_text = format_string($welcome_text, array(
        '@node_title' => $node->title,
      ));
      $form['submitted']['welcome']['#markup'] = $welcome_text;

      // set statement if exists
      $form['submitted']['fieldset_statement']['statement_wrapper']['statement']['#default_value'] = $w_vote->body->value->value();

      // set hidden field
      $form['submitted']['vote_node_id']['#value'] = $w_vote->getIdentifier();

      // add custom validation
      $form['#validate'][] = 'pw_vote_form_validate';
    }
  }
}


/**
 * Implements hook_form_validate().
 */

function pw_vote_form_validate(&$form, &$form_state, $form_id) {

  // petition end date reached
  $uid = pw_vote_check_user_allowed();
  $node = node_load($form['submitted']['vote_node_id']['#value']);
  $w_vote = entity_metadata_wrapper('node', $node);
  if(!$uid || time() > $w_vote->field_vote_node->field_petition_end_date->value() && $w_vote->field_voted->value() === TRUE && time() - $node->changed > 86400) {
    form_set_error('error', 'Die Frist zur Eintragung ist bereits abgelaufen.');
  }
}


/**
 *  Implements hook_webform_submission_presave().
 *
 *  save vote on webform submission.
 */

function pw_vote_webform_submission_insert($node, $submission) {

  // node id of webform "Ihr Standpunkt"
  if ($node->nid == 57286) {

    // map form values
    $form_values = _pw_webform_get_keyed_fields($node, $submission);

    // load node and wrap
    $vote = node_load($form_values['vote_node_id']);
    $w_vote = entity_metadata_wrapper('node', $vote);

    // revision settings
    $vote->revision = 1;
    $vote->log = 'This node was programmatically updated on ' . date('c');

    // set author
    $vote->uid = $w_vote->field_vote_user->uid->value();

    // set title
    $user_fullname = $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();
    $vote->title = 'Vote by ' . $user_fullname;

    // voting behavior
    $terms = taxonomy_get_term_by_name($form_values['vote'], 'votes');
    $vote->field_vote[$vote->language][0]['tid'] = key($terms);

    // set vote as voted
    $vote->field_voted[$vote->language][0]['value'] = 1;

    // statement
    $vote->body[$vote->language][0]['value'] = $form_values['statement'];

    // save node
    node_save($vote);

    // clear page cache
    $nodeurl = url(request_uri(),  array('absolute' => TRUE));
    $nodeurl = urldecode($nodeurl);
    cache_clear_all($nodeurl, 'cache_page');

    // politican wants a copy
    $service_account = 'service@abgeordnetenwatch.de';
    if($form_values['copy_email'] == 'send_copy') {
      drupal_mail('pw_vote', microtime(), $w_vote->field_vote_user->mail->value(), language_default(), array('w_vote' => $w_vote), $service_account, $send = TRUE);
    }

    // send a copy to editors
    drupal_mail('pw_vote', microtime(), $service_account, language_default(), array('w_vote' => $w_vote), $service_account, $send = TRUE);
  }

}


/**
 * Implements hook_mail().
 *
 * create mail
 */
function pw_vote_mail($key, &$message, $params) {

  // entity wrapper
  $w_vote = $params['w_vote'];

  // set subject
  $message['subject'] = 'Vielen Dank für Ihre Teilnahme an PetitionPlus!';

  // recipient name
  $recipient_name = $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();

  // salutation
  switch ($w_vote->field_vote_user->field_user_gender->value()) {
    case 'female':
      $salutation = 'Sehr geehrte Frau ' . $w_vote->field_vote_user->field_user_lname->value();
      break;
    case 'male':
      $salutation = 'Sehr geehrter Herr ' . $w_vote->field_vote_user->field_user_lname->value();
      break;
    default:
      $salutation = 'Guten Tag ' . $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();
      break;
  }

  // url to node e.g. petition
  $node_url = url('node/' . $w_vote->field_vote_node->nid->value(), array('absolute' => TRUE));

  // petition number of signings
  $petition_signings = number_format($w_vote->field_vote_node->field_petition_signings->value(), 0, ',', '.');

  // deadline for editing
  $deadline_for_editing = date('d.m.Y H:i', $w_vote->field_vote_node->field_petition_end_date->value());

  // date when we'll show the results (hardcoded: plus one day)
  $date_show_results = date('d.m.Y', $w_vote->field_vote_node->field_petition_end_date->value()+86400);

  // politicians vote
  $your_vote = $w_vote->field_vote->field_votes_label->value();

  // politicians statement
  $your_statement = $w_vote->body->value->value();

  // theme & set body
  $message['body'][] = theme('mail_thank_you', array(
      'salutation' => $salutation,
      'node_url' => $node_url,
      'petition_signings' => $petition_signings,
      'deadline_for_editing' => $deadline_for_editing,
      'date_show_results' => $date_show_results,
      'your_vote' => $your_vote,
      'your_statement' => $your_statement,
    )
  );
}


/**
 *  Implements hook_block_info().
 *
 *  create a block that displays voting behaviors.
 */

function pw_vote_block_info() {

  $blocks['voting_behavior'] = array(
    'info' => t('Displays Voting Behavior'),
  );
  $blocks['final_result'] = array(
    'info' => t('Displays Final Result'),
  );

  return $blocks;
}

/**
 *  Implements hook_block_view().
 *
 */

function pw_vote_block_view($delta, $arguments = array()) {

  // the $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'voting_behavior':
      $node = menu_get_object();
      $field_parliament = field_get_items('node', $node, 'field_parliament');
      if (!empty($node) && !empty($field_parliament)) {
        $block['content'] = pw_vote_voting_behavior($node);
      }
      break;
    case 'final_result_short':
      $block['content'] = pw_vote_final_result($arguments['nid'], TRUE);
      break;
    case 'final_result_full':
      $block['content'] = pw_vote_final_result($arguments['nid']);
      break;
  }
  return $block;
}

/**
 * pw_vote_final_result().
 * @param $nid int
 *   related nid to show result for.
 * @param $result_short boolean
 *   either show only yes/no or a full result.
 * @return string
 *   returns themed final result for the related node.
 */
function pw_vote_final_result($nid, $result_short=FALSE){

  // return value
  $content = '';

  // retrieve vocabulary id
  $voc = taxonomy_vocabulary_machine_name_load('votes');

  // load vote terms (yes/no/...) from vocabulary
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $voc->vid, '=');
  if($result_short){
    $query->propertyCondition('name', array('yes', 'no'));
  }
  $result = $query->execute();

  if($result['taxonomy_term']){
    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));

    // iterate through votes
    $sum_votes = array();
    foreach($terms as $term){
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'vote')
        ->fieldCondition('field_vote_node', 'target_id', $nid)
        ->fieldCondition('field_vote', 'tid', array($term->tid))
        ->propertyCondition('status', NODE_PUBLISHED);

      // store summarized votes
      $sum_votes[$term->tid] = $query->count()->execute();
    }

    // no result
    if(array_sum($sum_votes) == 0) {
      return '';
    }

    if($result_short){

      // filter for votes have won
      $max_vote = max($sum_votes);
      $sum_votes = array_fill_keys(array_keys($sum_votes, $max_vote), '');
    }
    else{

      // sort votes descending
      arsort($sum_votes);
    }

    // call subroutine for theming
    $content = pw_vote_voting_behavior_sum_votes($sum_votes, 'voting_behavior_sum_overview', '', FALSE);
  }

  // return
  return $content;
}

/**
 * pw_vote_voting_behavior().
 * @param $node
 *   related node, e.g. petition on which was voted.
 * @return string
 *   returns all themed votes related to the node,
 */
function pw_vote_voting_behavior($node) {

  // add javascript file
  drupal_add_js(drupal_get_path('module', 'pw_vote') . '/pw_vote.js');

  // holds themed votes
  $all_votes = array();

  // counts votes for overview
  $sum_votes_fractions = array();
  $sum_votes_overview = array();

  // preload default portrait
  $portrait_info = field_info_field('field_user_picture');
  $image = file_load($portrait_info['settings']['default_image']);
  $portrait_default = theme('image_style', array(
      'path' => $image->uri,
      'style_name' => 'pw_portrait_s',
    )
  );

  // load parliament
  $field_parliament = field_get_items('node', $node, 'field_parliament');
  $parliament = taxonomy_term_load($field_parliament[0]['tid']);

  // collect data from base (votes, user and term ids for party, fraction and voting behaviour)
  $query = db_select("node", "n");

  // join on target politician to get uid
  $query->addField("f_vote_user", "field_vote_user_target_id", "uid");
  $query->join("field_revision_field_vote_user", "f_vote_user", "n.vid = f_vote_user.revision_id AND f_vote_user.bundle = 'vote'");

  // join on target node
  $query->join("field_revision_field_vote_node", "f_vote_node", "n.vid = f_vote_node.revision_id AND f_vote_node.bundle = 'vote'");
  $query->condition("f_vote_node.field_vote_node_target_id", $node->nid);

  // join on vote (yes, no, ...) to get tid and sort the result
  $query->addField("f_vote", "field_vote_tid", "vote_tid");
  $query->join("field_revision_field_vote", "f_vote", "n.vid = f_vote.revision_id AND f_vote.bundle = 'vote'");
  $query->orderBy('f_vote.field_vote_tid');

  // join on body to get statement
  $query->addField("f_body", "body_value", "statement");
  $query->leftJoin("field_revision_body", "f_body", "n.vid = f_body.revision_id AND f_body.bundle = 'vote'");

  // join on meta table to get correct vid by parliament and role
  $query->join("user_archive_cache", "ua", "f_vote_user.field_vote_user_target_id = ua.uid");
  $query->condition("ua.user_role", "deputy");
  $query->condition("ua.parliament_name", $parliament->name);

  // join on first name
  $query->join("field_revision_field_user_fname", "f_user_fname", "ua.vid = f_user_fname.revision_id AND f_user_fname.entity_type = 'user'");
  $query->addField("f_user_fname", "field_user_fname_value", "firstname");

  // join on last name
  $query->addField("f_user_lname", "field_user_lname_value", "lastname");
  $query->join("field_revision_field_user_lname", "f_user_lname", "ua.vid = f_user_lname.revision_id AND f_user_lname.entity_type = 'user'");

  // join on fractions to get tid for fraction
  $query->addField("f_user_fraction", "field_user_fraction_tid", "fraction_tid");
  $query->join("field_revision_field_user_fraction", "f_user_fraction", "ua.vid = f_user_fraction.revision_id AND f_user_fraction.entity_type = 'user'");

  // join on parties to get tid for party
  $query->addField("f_user_party", "field_user_party_tid", "party_tid");
  $query->join("field_revision_field_user_party", "f_user_party", "ua.vid = f_user_party.revision_id AND f_user_party.entity_type = 'user'");

  // join on file tables to get politcian picture (if available)
  $query->addField("file", "uri", "picture_uri");
  $query->leftJoin("field_revision_field_user_picture", "f_user_picture", "ua.vid = f_user_picture.revision_id AND f_user_picture.entity_type = 'user'");
  $query->leftJoin("file_managed", "file", "f_user_picture.field_user_picture_fid = file.fid");

  // group by uid
  $query->groupBy('ua.uid');

  // get result
  $result = $query->execute();

  # _pw_query_debug($query)

  // pre-fetch all terms for fractions, parties and votes
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', array('fraction', 'party', 'votes'));
  $result_terms = $query->execute();
  $terms = taxonomy_term_load_multiple(array_keys($result_terms['taxonomy_term']));

  // iterate through nodes
  while($record = $result->fetchAssoc()) {

    // prepare data
    $fraction = $terms[$record['fraction_tid']]->name;
    $party = $terms[$record['party_tid']]->name;
    $vote_tid = $record['vote_tid'];
    $vote = $terms[$vote_tid]->field_votes_label[LANGUAGE_NONE][0]['value'];

    // skip if not all data is available
    if (empty($fraction) || empty($vote) || empty($party)) {
      continue;
    }

    // add fraction as sub array to store votes
    elseif (!isset($all_votes[$fraction])) {
      $all_votes[$fraction] = array();
    }

    // theme & add a single vote to fraction array
    if ($record['picture_uri']) {
      $portrait = theme('image_style', array(
          'path' => $record['picture_uri'],
          'style_name' => 'pw_portrait_s',
        )
      );
    }
    else {
      $portrait = $portrait_default;
    }
    $all_votes[$fraction][] = theme('voting_behavior_single_vote', array(
        'class_name' => $terms[$vote_tid]->name,
        'firstname' => $record['firstname'],
        'lastname' => $record['lastname'],
        'party' => $party,
        'voting_behavior' => $vote,
        'portrait' => $portrait,
        'statement' => $record['statement'],
        'path_profile' => drupal_get_path_alias('user/'.$record['uid']),
      )
    );

    // sum votes for fractions
    if (!isset($sum_votes_fractions[$fraction])) {
      $sum_votes_fractions[$fraction] = array();
    }

    if (!isset($sum_votes_fractions[$fraction][$vote_tid])) {
      $sum_votes_fractions[$fraction][$vote_tid] = 0;
    }
    $sum_votes_fractions[$fraction][$vote_tid]++;

    // sum votes for overview
    if (!isset($sum_votes_overview[$vote_tid])) {
      $sum_votes_overview[$vote_tid] = 0;
    }
    $sum_votes_overview[$vote_tid]++;
  }

  // sort fractions by number of votes
  array_multisort(array_map('count', $all_votes), SORT_DESC, $all_votes);

  // build containers
  $container_parties = array();
  foreach ($all_votes as $fraction => $votes_fraction) {

    // put 6 votes into one vertical containers
    $buffer_vertical = '';
    $buffer_fraction = '';
    for ($i = 0; $i < sizeof($votes_fraction); $i++) {
      $buffer_vertical .= $votes_fraction[$i];
      if (($i + 1) % 7 == 0 || sizeof($votes_fraction) - 1 == $i) {
        $buffer_fraction .= theme('voting_behavior_container_vertical', array(
            'list_voting_behavior' => $buffer_vertical,
          )
        );
        $buffer_vertical = '';
      }
    }

    // put vertical containers and sum votes into one fraction container
    $container_parties[$fraction] = theme('voting_behavior_container_fraction', array(
        'fraction' => $fraction,
        'fraction_num_members' => format_plural(sizeof($votes_fraction), '1 Mitglied', '@count Mitglieder'),
        'list_voting_behavior' => $buffer_fraction,
        'list_voting_behavior_sum' => pw_vote_voting_behavior_sum_votes($sum_votes_fractions[$fraction], 'voting_behavior_sum_fraction', $fraction),
      )
    );
  }

  // put all fraction container together and add overview
  $content = theme('voting_behavior_container_overview', array(
      'list_voting_behavior_sum' => pw_vote_voting_behavior_sum_votes($sum_votes_overview, 'voting_behavior_sum_overview'),
      'list_voting_behavior' => implode($container_parties),
    )
  );

  // return
  return $content;
}

/**
 * pw_vote_voting_behavior_sum_votes().
 * @param $array_sum
 *   array with tid of votes as key and summarized votes
 * @return string
 *   returns themed overview
 */
function pw_vote_voting_behavior_sum_votes($array_sum, $theme_function, $fraction='Alle', $do_link=TRUE) {
  $content = '';
  foreach ($array_sum as $tid => $sum) {
    $term = taxonomy_term_load($tid);
    $label = field_get_items('taxonomy_term', $term, 'field_votes_label');
    $content .= theme($theme_function, array(
        'sum' => $sum,
        'fraction' => $fraction,
        'class_name' => $term->name,
        'voting_behavior' => $label[0]['value'],
        'do_link' => $do_link,
      )
    );
  }
  return $content;
}

function pw_vote_theme() {
  return array(
    'voting_behavior_container_overview' => array(
      'template' => 'voting-behavior-container-overview',
    ),
    'voting_behavior_container_overview_fraction' => array(
      'template' => 'voting-behavior-container-overview-fraction',
    ),
    'voting_behavior_container_fraction' => array(
      'template' => 'voting-behavior-container-fraction',
    ),
    'voting_behavior_container_vertical' => array(
      'template' => 'voting-behavior-container-vertical',
    ),
    'voting_behavior_single_vote' => array(
      'template' => 'voting-behavior-single-vote',
    ),
    'voting_behavior_sum_overview' => array(
      'template' => 'voting-behavior-sum-overview',
    ),
    'voting_behavior_sum_fraction' => array(
      'template' => 'voting-behavior-sum-fraction',
    ),
    'mail_thank_you' => array(
      'template' => 'mail-thank-you',
    ),
  );
}



/**
 * Implements hook_preprocess_node().
 *
 * Retrieve data for teaser view.
 *
 */
function pw_vote_preprocess_node(&$variables) {
  if ($variables['type'] == 'vote' && $variables['view_mode'] = 'teaser') {

    // wrap node
    $w_vote = entity_metadata_wrapper('node', $variables['node']);

    // set variables
    $variables['fullname'] = trim($w_vote->field_vote_user->field_user_title->value().' '.$w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value());
    $variables['party'] = $w_vote->field_vote_user->field_user_party->label();
    $variables['node_title'] = $w_vote->field_vote_node->label();
    $variables['voting_behavior'] = $w_vote->field_vote->field_votes_label->value();
    $variables['class_name'] = $w_vote->field_vote->label();
    $variables['statement'] = check_markup($w_vote->body->value->value());
    $variables['path_profile'] = drupal_get_path_alias('user/' . $w_vote->field_vote_user->uid->value());

    // theme and set portrait
    if ($w_vote->field_vote_user->field_user_picture->value()) {
      $portrait_uri = $w_vote->field_vote_user->field_user_picture->file->value()->uri;
    }
    else {
      $portrait_info = field_info_field('field_user_picture');
      $file = file_load($portrait_info['settings']['default_image']);
      $portrait_uri = $file->uri;
    }

    $variables['portrait'] = theme('image_style', array(
        'path' => $portrait_uri,
        'style_name' => 'pw_portrait_xs',
      )
    );

    // set template name
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['node']->type . '__' . $variables['view_mode'];

  }
}

/**
 * Temporary hook to alter behavior of the poll search blocks since the current Solr module
 * does not respect view filters correctly. Should be obsolete with the introduction of Search
 * API modules.
 */
function pw_vote_views_query_alter(&$view, &$query) {
  if ($view->name == 'pw_vote_search' && $view->current_display == 'block_2') {
    $node_id = "*".arg(1)."*";
    $query->add_where(1,'sm_field_vote_node', $node_id, 'LIKE');
  }
  if ($view->name == 'pw_vote_positions' && arg(0) == 'node' && is_numeric(arg(1))) {
    $node_id = menu_get_object()->nid;
    $query->add_where(1,'field_data_field_vote_node.field_vote_node_target_id', $node_id, '=');
  }
}

/**
 * Find and mark votes that deviate from the fractions majority opinion.
 * @param $nid: Node ID of poll or petition.
 */
function pw_vote_mark_deviant_votes($nid) {
  // Load poll/petition node
  $p_node = node_load($nid);
  if (!($p_node->type == "poll" || $p_node->type == "pw_petition")) {
    return;
  }
  $parliament = taxonomy_term_load($p_node->field_parliament['und'][0]['tid'])->name;

  // Get all users of that parliament at the time of the poll
  $query = db_select('user_archive_cache', 'uac');
  $query ->fields('uac', array('uid', 'fraction_name'))
         ->isNotNull('fraction_name');
  $date = null;
  if ($p_node->type == "poll"){
    $date = $p_node->field_poll_date['und'][0]['value'];
  }
  elseif ($p_node->type == "pw_petition") {
    $date = $p_node->field_petition_end_date['und'][0]['value'];
  }
  _pw_uac_add_conditions($query, array(
      'parliament' => $parliament,
      'roles' => 'deputy',
      'date' => date($date),
    )
  );
  $uac_result = $query->execute()->fetchAll();

  // Generate array with user/fraction/vote information
  foreach($uac_result as $key => $user) {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'node')
        ->entityCondition('bundle','vote')
        ->fieldCondition('field_vote_user', 'target_id', $user->uid, '=')
        ->fieldCondition('field_vote_node', 'target_id', $nid, '=');
    $votes = $efq->execute();
    if (empty($votes)) {
      echo "";
      unset($uac_result[$key]);
      continue;
    }
    $user->vote_id = (String) array_keys($votes['node'])[0];
    $user->vote_voice_tid = node_load($user->vote_id)->field_vote['und'][0]['tid'];
  }

  // Count votes for each fraction
  $vote_sheet = array();
  foreach($uac_result as $key => $user) {
    if (!$vote_sheet[$user->fraction_name]){
      $vote_sheet[$user->fraction_name] = array('19667' => 0, '19668' => 0, '19669' => 0);
    }
    if (in_array($user->vote_voice_tid,array_keys($vote_sheet[$user->fraction_name]))){
      $vote_sheet[$user->fraction_name][$user->vote_voice_tid]++;
    }
  }

  // Remove majority votes from vote sheet
  foreach($vote_sheet as $vs_fraction => &$values){
    $max = max($values);
    foreach ($values as $key => $value){
      if ($value == $max) {
        unset($values[$key]);
      }
    }
  }
  // Mark the votes still left in the sheet
  foreach($uac_result as $uac_row){
      $values = $vote_sheet[$uac_row->fraction_name];
      // Load current vote node
      $vote_to_mark = node_load($uac_row->vote_id);
      if (in_array($uac_row->vote_voice_tid,array_keys($values))){
        // Mark vote as deviant
        $vote_to_mark->field_deviant_vote['und'][0]['value'] = 1;
      }
      else {
        $vote_to_mark->field_deviant_vote['und'][0]['value'] = 0;
      }
      node_save($vote_to_mark);
  }
}

/**
 * Implements hook_node_update().
 */
function pw_vote_node_update($node) {
  if($node->type == 'vote'){
    $field_node = field_get_items('node', $node, 'field_vote_node');
    $target_id = $field_node[0]['target_id'];
    $node_target = node_load($target_id);
    if(field_info_instance('node', 'field_results', $node_target->type)){
      $x="";
    }

  }
}
